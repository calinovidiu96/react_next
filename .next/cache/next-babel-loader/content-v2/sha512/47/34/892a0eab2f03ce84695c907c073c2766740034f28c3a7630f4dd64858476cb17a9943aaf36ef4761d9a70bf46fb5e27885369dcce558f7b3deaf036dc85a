{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ovidiu/fisiere/cod/React_app/react_nextjs/pages/[meetupId]/index.js\";\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://ovidiu:parolamea@cluster0.ijqyr.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollenction = db.collection('meetups');\n  const meetups = await meetupsCollenction.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    // false for manual insert all params, true for pre-generate\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://ovidiu:parolamea@cluster0.ijqyr.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollenction = db.collection('meetups');\n  const selectedMeetup = await meetupsCollenction.findOne({\n    _id: meetupId\n  });\n  const selectedMeetupStr = JSON.stringify(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetupStr\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/ovidiu/fisiere/cod/React_app/react_nextjs/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollenction","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","selectedMeetupStr","JSON","stringify"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC7B,sBACC,QAAC,YAAD;AACC,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADzB;AAEC,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFzB;AAGC,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH3B;AAIC,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ/B;AAAA;AAAA;AAAA;AAAA,UADD;AAQA;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACtC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACpB,+FADoB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B;AAEA,QAAMC,OAAO,GAAG,MAAMF,kBAAkB,CAACG,IAAnB,CAAwB,EAAxB,EAA4B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA5B,EAAwCC,OAAxC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNC,IAAAA,QAAQ,EAAE,KADJ;AACW;AACjBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC/BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADuB,KAAb,CAAZ;AAFD,GAAP;AAMA;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACpB,+FADoB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,kBAAkB,CAACiB,OAAnB,CAA2B;AACvDb,IAAAA,GAAG,EAAEQ;AADkD,GAA3B,CAA7B;AAIA,QAAMM,iBAAiB,GAAGC,IAAI,CAACC,SAAL,CAAeJ,cAAf,CAA1B;AAEAnB,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNhB,IAAAA,KAAK,EAAE;AACNC,MAAAA,UAAU,EAAE2B;AADN;AADD,GAAP;AAKA;AAED,eAAe7B,aAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n\treturn (\n\t\t<MeetupDetail\n\t\t\timage={props.meetupData.image}\n\t\t\ttitle={props.meetupData.title}\n\t\t\taddress={props.meetupData.address}\n\t\t\tdescription={props.meetupData.description}\n\t\t/>\n\t);\n}\n\nexport async function getStaticPaths() {\n\tconst client = await MongoClient.connect(\n\t\t'mongodb+srv://ovidiu:parolamea@cluster0.ijqyr.mongodb.net/meetups?retryWrites=true&w=majority'\n\t);\n\tconst db = client.db();\n\n\tconst meetupsCollenction = db.collection('meetups');\n\n\tconst meetups = await meetupsCollenction.find({}, { _id: 1 }).toArray();\n\n\tclient.close();\n\n\treturn {\n\t\tfallback: false, // false for manual insert all params, true for pre-generate\n\t\tpaths: meetups.map((meetup) => ({\n\t\t\tparams: { meetupId: meetup._id.toString() },\n\t\t})),\n\t};\n}\n\nexport async function getStaticProps(context) {\n\tconst meetupId = context.params.meetupId;\n\n\tconst client = await MongoClient.connect(\n\t\t'mongodb+srv://ovidiu:parolamea@cluster0.ijqyr.mongodb.net/meetups?retryWrites=true&w=majority'\n\t);\n\tconst db = client.db();\n\n\tconst meetupsCollenction = db.collection('meetups');\n\n\tconst selectedMeetup = await meetupsCollenction.findOne({\n\t\t_id: meetupId,\n\t});\n\n\tconst selectedMeetupStr = JSON.stringify(selectedMeetup);\n\n\tclient.close();\n\n\treturn {\n\t\tprops: {\n\t\t\tmeetupData: selectedMeetupStr,\n\t\t},\n\t};\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}